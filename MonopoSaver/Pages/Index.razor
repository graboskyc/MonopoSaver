@page "/{Token}"
@page "/"
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;
@using HeyRed.MarkdownSharp;
@using MongoDB.Bson;
@using MongoDB.Driver;
@inject IMongoCollection<Game> GCol;
@using Blazorise;

<PageTitle>Monopo Saver</PageTitle>

<Modal @ref="modalRef">
    <ModalContent Centered Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>Rules</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @Rules
        </ModalBody>
    </ModalContent>
</Modal>

 
@if(g != null) {
    <div class="jumbotron jumbotron-fluid" style="margin-bottom:20px;">
        <h1>Monopo Saver</h1>
        <h3><i>Game Code <b @onclick="CopyToClipboard">@g.Token</b></i></h3>
        <h3>Board Variant <select @onchange="VariantChanged" class="form-control">
            <option value="GB">GB</option>
            <option value="Cat">Cat</option>
            <option class="original">Original</option>
        </select></h3>
    </div>

    <EditForm Model="@g">

        @foreach (var p in g.Players)
        {
            <div class="card" style="margin-bottom:30px;">
                <div class="card-header ch-dark">
                    <h5 class="card-title">Player <input type="text" @bind="p.Name" class="form-control" /></h5>
                </div>
                <div class="card-body">
                    <table class="table">
                        <tr><th>Piece</th>
                            <td><select @bind="p.GamePiece" class="form-control">
                                @foreach (var piece in b.Pieces)
                                {
                                    <option>@piece</option>
                                }
                                </select></td></tr>
                        <tr><th>Position</th>
                            <td><select @bind="p.LastPosition" class="form-control">
                                @foreach (var card in b.Places)
                                {
                                    <option>@card.Name</option>
                                }
                                </select></td></tr>
                        <tr><th>Money</th>
                            <td><div class="input-group"><div class="input-group-prepend">
                                <div class="input-group-text">$</div></div>
                                <input class="form-control" type="number" @bind="p.Money" /></div></td></tr>
                        <tr><th>Get Out Of Jail Cards</th>
                            <td><input class="form-control" type="number" min="0" max="10" @bind="p.GetOutOfJailCards" /></td></tr>
                    </table>

                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title">@p.Name's Properties:</h5>
                        </div>
                        <table class="table table-striped" style="margin:5px;">
                            <thead class="thead-dark"><tr>
                                <th></th>
                                <th>Name</th>
                                <th>House</th>
                                <th>Mort.</th>
                            </tr></thead>
                            <tbody>
                                @foreach (var c in p.Props) {
                                    <tr>
                                        <td>
                                            <button @onclick="(() => DelProp(p, c))" class="btn btn-sm btn-danger"><span class="oi oi-trash"></span></button>
                                            </td>
                                        <td><select @bind="c.Name" class="form-control" style="border-width:3px; border-color:@(b.Places.Where(p=> p.Name == c.Name).FirstOrDefault()?.Color ?? "#000000") ">
                                            @foreach (var group in b.Places.Where(card => card.Ownable == true ).GroupBy(card => card.ColorName))
                                            {
                                                <optgroup label="@group.Key">
                                                @foreach (var card in group)
                                                {
                                                    <option>@card.Name</option>
                                                }
                                                </optgroup>
                                            }
                                            </select></td>
                                        <td><select @bind="c.Houses" class="form-control">
                                            <option value="0">None</option>
                                            <option value="1">1</option>
                                            <option value="2">2</option>
                                            <option value="3">3</option>
                                            <option value="4">4</option>
                                            <option value="5">Hotel</option>
                                        </select></td>
                                        <td><select @bind="c.isMortgaged" class="form-control">
                                            <option value="0">No</option>
                                            <option value="1">Yes</option>
                                        </select></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <button @onclick="@(() => AddProp(p))" class="btn btn-sm btn-gsky-sec" style="width: 100%;">Add Propery</button>
                    </div>
                    
                </div>
            </div>
        }
    </EditForm>

    <br><br>

    <div>@resp</div>
    <button @onclick="AddPlayer" class="btn btn-lg btn-gsky-sec" style="width: 100%;">Add Player</button>
    <br>
    <button @onclick="Save" class="btn btn-lg btn-gsky-pri" style="width: 100%;">Save With New ID</button>
    <br>
    <button @onclick="(() => modalRef.Show())" class="btn btn-lg btn-gsky-sec" style="width: 100%;">Show Rules</button>

    <br><br>
}


@code {
    [Parameter]
    public string Token {get; set;}

    DataModels.Game g = null;
    DataModels.Board b = null;
    string BoardVariant = "GB";
    string resp = "";
    private MarkupString Rules;
    Markdown mark = new Markdown();
    
    private Modal modalRef;

    private string NewSaveToken() {
        Random random = new Random();
        const string chars = "AaBbCcDdEeFfGgHhLMmNnQqRrYy23456789";
        return new string(Enumerable.Repeat(chars, 6).Select(s => s[random.Next(s.Length)]).ToArray());
   }

   private void AddPlayer() {
       g.Players.Add(new DataModels.Player());
       StateHasChanged();
   }

   private void AddProp(DataModels.Player p) {
       p.Props.Add(new DataModels.Prop());
       StateHasChanged();
   }

   private void DelProp(DataModels.Player p, DataModels.Prop c) {
       p.Props.RemoveAll(card => card.Name == c.Name);
       StateHasChanged();
   }

   private async Task Save() {
       Token = NewSaveToken();
       g.Token = Token;
       StateHasChanged();
       var filter = Builders<DataModels.Game>.Filter.Eq(x => x.Token, g.Token);
       var options = new ReplaceOptions { IsUpsert = true };
       GCol.ReplaceOne(filter, g, options);
       NavigationManager.NavigateTo("/"+Token);
   }

    private void VariantChanged(ChangeEventArgs e) {
        BoardVariant = e.Value.ToString();
        b = new DataModels.Board(BoardVariant);
        Rules = (MarkupString)mark.Transform(b.Rules);
        StateHasChanged();
    }

    private async Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", g.Token);
    }

    protected override async Task OnInitializedAsync() {
        if (Token == null) {
            Token = NewSaveToken();
            NavigationManager.NavigateTo("/"+Token);
        }

        b = new DataModels.Board(BoardVariant);
        Rules = (MarkupString)mark.Transform(b.Rules);

        var loadedGame = GCol.Find(x => x.Token == Token).FirstOrDefault();

        if(loadedGame != null) {
            g = loadedGame;
        } else {
            g = new DataModels.Game();
            g.Token = Token;
        }

        StateHasChanged();
    }
}